#!/usr/bin/ruby
path = '/home/nils/dev/mycommands/'
require 'rubygems'
require 'clipboard'
require 'ruby-debug'
require 'yaml'
require 'readline'
require "#{path}controllers.rb"
require "#{path}models.rb"
require "#{path}views.rb"
class Factory
  @@objects = []
  def self.get _class
    for object in @@objects
      return object if object.class == eval(_class)
    end
    object = eval(_class).new
    @@objects.push object
    object
  end
end

class Application
  attr_accessor :history, :controller, :action, :go_back
  def initialize
    @history = Factory::get('HistoryModel')
    @controller = 'Category'
    @action = 'browse'
  end
  def run
    dispatch @controller, @action
    get_input
  end

  def input_to controller, action
    @controller = controller
    @action = action
  end

  def get_input
    while input = Readline.readline('> ', true)
      check_input input
      dispatch @controller, @action, input unless @go_back
    end
  end

  def check_input input
    @go_back = false
    case input
    when '0'
      puts 'check'
#      debugger
      @history.back
#      puts history.inspect
      @controller, @action, input = @history.history.last
#      debugger
      input_to @controller, @action
      @go_back = true
      dispatch @controller, @action, input
    end
  end

  def dispatch controller, action, input = nil
#    @history.add(controller, action, input)
#    debugger
    puts "dispatching #{controller}, #{action}, #{input}"
    @history.add(controller, action, input) unless @go_back
    if input.nil?
#      puts controller+action
      Factory::get(controller+'Controller').send action
    else
      Factory::get(controller+'Controller').send action, input
    end
#    puts @history.history.inspect
  end
end

Factory::get('Application').run
