#!/usr/bin/ruby

#    Copyright (C) 2011 Nils Eriksson
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


Path = File.expand_path(File.dirname( File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__ ))
$: << Path
Debug = ARGV.include? '-D'

require 'rubygems'
require 'clipboard'
require 'ruby-debug' if Debug
require 'yaml'
require 'readline'
require 'observer'
require "controllers.rb"
require "models.rb"
require "views.rb"


class Factory
  @@objects = []
  def self.get _class
    for object in @@objects
      return object if object.class == eval(_class.to_s)
    end
    object = eval(_class.to_s).new
    @@objects.push object
    object
  end
end

class Application
  attr_accessor :history, :controller, :action, :go_back
  def initialize
    @history = Factory::get(:HistoryModel)
    @controller = 'Category'
    @action = 'browse'
    @go_back = false
  end
  def run
    dispatch @controller, @action
    get_input
  end

  def input_to controller, action
    @controller = controller
    @action = action
  end

  def get_input
    while input = Readline.readline('> ', true)
      check_input input
      dispatch @controller, @action, input unless @go_back
    end
  end

  def check_input input
    @go_back = false
    case input
    when 'q'
      exit if %w(Category Command).include? @controller
#    when '0'
#      exit if @history.at_start?
#      @history.back
#      @controller, @action, input = @history.history.last
#      input_to @controller, @action
#      @go_back = true
#      dispatch @controller, @action, input
    end
  end

  def dispatch controller, action, input = nil
    puts "Dispatching: #{controller}, #{action}, #{input}" if Debug
    @history.add(controller, action, input) unless @go_back
    if input.nil?
      Factory::get(controller+'Controller').send action
    else
      Factory::get(controller+'Controller').send action, input
    end
  end
end

Factory::get(:Application).run
