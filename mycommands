#!/usr/bin/ruby

Path = File.expand_path(File.dirname( File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__ ))
$: << Path
require 'rubygems'
require 'clipboard'
require 'ruby-debug'
require 'yaml'
require 'readline'
require "controllers.rb"
require "models.rb"
require "views.rb"
class Factory
  @@objects = []
  def self.get _class
    for object in @@objects
      return object if object.class == eval(_class.to_s)
    end
    object = eval(_class.to_s).new
    @@objects.push object
    object
  end
end

class Application
  attr_accessor :history, :controller, :action, :go_back
  def initialize
    @history = Factory::get(:HistoryModel)
    @controller = 'Category'
    @action = 'browse'
  end
  def run
    dispatch @controller, @action
    get_input
  end

  def input_to controller, action
    @controller = controller
    @action = action
  end

  def get_input
    while input = Readline.readline('> ', true)
      check_input input
      dispatch @controller, @action, input unless @go_back
    end
  end

  def check_input input
    @go_back = false
    case input
    when 'q'
      exit if %w(Category Command).include? @controller
    when '0'
      @history.back
      @controller, @action, input = @history.history.last
      input_to @controller, @action
      @go_back = true
      dispatch @controller, @action, input
    end
  end

  def dispatch controller, action, input = nil
#    puts "dispatching #{controller}, #{action}, #{input}"
    @history.add(controller, action, input) unless @go_back
    if input.nil?
      Factory::get(controller+'Controller').send action
    else
      Factory::get(controller+'Controller').send action, input
    end
  end
end

Factory::get(:Application).run
